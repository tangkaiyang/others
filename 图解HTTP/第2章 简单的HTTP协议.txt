HTTP/1.1
2.1 HTTP协议用于客户端和服务器端之间的通信
请求访问文本或图像资源的一端称为客户端,
提供资源响应的一段称为服务器端
仅从一条通信路线来说,服务器端和客户端的角色是确定的,HTTP协议能够明确两者的角色
2.2 通过请求和响应的交换达成通信
HTTP协议规定,请求从客户端发出,最后服务器端响应该请求并返回.
客户端开始建立通信,服务器端在没有接受到请求之前不会发送响应

从客户端发送给某个HTTP服务器端的请求报文:
GET /index.htm HTTP/1.1
Host: hackr.jp
GET表示请求访问服务器的类型,称为方法(method).
随后的字符串/index.htm指明了请求访问的资源对象,也叫做请求URI(request-URI).
最后的HTTP/1.1,即HTTP的版本号,用来提示客户端使用的HTTP协议功能
请求报文是由请求方法,请求URI,协议版本,可选的请求首部字段和内容实体构成的.
接收到请求的服务器,会将请求内容的处理结果以响应的形式返回.
HTTP/1.1 200 OK
Date : ....
Content-Length: 362
Content-Type: text/html

<html>
...
起始行开头的HTTP/1.1表示服务器对应的HTTP版本
紧挨着的200 OK表示请求的处理结果的状态码(status code)和原因短语(reason-phrase).
下一行显示了创建响应的日期时间,是首部字段(header field)内的一个属性
接着以一空行分隔,之后的内容称为资源实体的主体(entity body)
响应报文基本上由协议版本,状态码(表示请求成功或者失败的数字代码),用以解释状态码原因短语,可选的响应首部字段
以及实体主体构成.

2.3 HTTP是不保存状态的协议
HTTP是一种不保存状态,即无状态(stateless)协议.
HTTP协议自身不对请求和响应之间的通信状态进行保存.
在HTTP这个级别,协议对应发送过的请求或响应都不做持久化处理.
HTTP/1.1虽然是无状态协议,但是为了实现期望的保持状态功能,于是引入了Cookie技术.
有了Cookie再用HTTP协议通信,就可以管理状态了.
2.4 请求URI定位资源
HTTP协议使用URI定位互联网上的资源.
因为URI的特定功能,在互联网上任意位置的资源都能访问到
当客户端请求访问资源而发送请求时,URI需要将作为请求报文中的请求URI包含在内.
除此之外,如果不是访问特定资源而是对服务器本身发起请求,可以用一个*来代替请求URI
OPTIONS * HTTP/1.1
2.5 告知服务器意图的HTTP方法
GET:获取资源
GET方法用来请求访问已被URI识别的资源.指定的资源经服务器端解析后返回响应内容.
也就是说,如果请求的资源时文本,那就保持原样返回;如果是像CGI(Common Gateway Interface, 通用网关接口),
那样的程序,则返回经过执行后的输出结果
使用GET方法的请求.响应例子:
请求  GET /index.html HTTP/1.1
      Host:www.hackr.jp
响应  返回index.html的页面资源
请求  GET /index.html HTTP/1.1
      Host:www.hackr.jp
      If-Modified-Since:Thu, 12 Jul 2012 07:30:00 GMT
响应  仅返回2012年7月12日7点30分以后更新过的index.html页面资源.
      如果未有内容更新,则以状态码304 Not Modified作为响应返回
POST:传输实体主体
POST方法用来传输实体的主体
虽然用GET方法也可以传输实体的主体,但一般不用GET方法进行传输,而是用POST方法.
虽说POST的功能与GET很相似,但POST的主要目的并不是获取响应的主体内容
使用POST方法的请求.响应的例子:
请求  POST /submit.cgi HTTP/1.1
      Host:www.hackr.jp
      Content-Length: 1560 (1560字节的数据)
响应  返回submit.cgi接收数据的处理结果
PUT:传输文件
PUT方法用来传输文件.就像FTP协议的文件上传一样,要求在请求报文的主体中包含文件内容,然后保存到请求URI指定的位置.
但是,鉴于HTTP/1.1的PUT方法自身不带验证机制,任何人都可以上传文件,存在安全性问题,因此一般的Web网站
不使用该方法.若配合Web应用程序的验证机制,或者架构设计采用REST(REpresentational State Transfer,表征状态转移)标准的同类网站,就可能会开放PUT方法.
使用PUT方法的请求.相应的例子
请求  PUT/example.html HTTP/1.1
      Host: www.hackr.jp
      Content-Type: text/html
      Content-Length: 1560 (1560字节的数据)
响应  响应返回状态码204 No Content (比如:该html已存在于服务器上)
响应的意思其实是请求执行成功了,但无数据返回
HEAD: 获得报文首部
HEAD方法和GET方法一样,只是不返回报文主体部分.
用于确认URI的有效性及资源更新的日期时间等
使用HEAD方法的请求.响应的例子
请求  HEAD /index.html HTTP/1.1
响应  返回index.html有关的响应首部
DELETE:删除文件
DELETE方法用来删除文件,是与PUT相反的方法.DELETE方法按请求URI删除指定的资源
但是,HTTP/1.1的DELETE方法本身和PUT方法一样不带验证机制,所以一般的Web网站也不使用DELETE方法.
当配合Web应用程序的验证机制,或遵守REST标准时还有可能会开放使用的.
使用DELETE方法的请求.响应例子
请求  DELETE /example.html HTTP/1.1
响应  响应返回状态码 204 No Content(比如:该html已经从服务器上删除)
OPTIONS:询问支持的方法
OPTIONS方法用来查询针对请求URI指定的资源支持的方法
使用OPTIONS方法的请求.响应的例子
请求  OPTIONS * HTTP/1.1
      Host:www.hackr.jp
响应  HTTP/1.1 200 OK
      Allow:GET,POST,HEAD,OPTIONS(返回服务器支持的方法)
TRACE:追踪路径
TRACE方法是让Web服务器端将之前的请求通信环回给客户端的方法
发送请求时,在Max-Forwards首部字段中填入数值,每经过一个服务器端就将该数字减1,当数值刚好减到0时,就
停止继续传输,最后接受到请求的服务器端则返回状态码200 OK的响应
客户端通过TRACE方法可以查询发送出去的请求是怎样被加工修改/篡改的.
这是因为,请求想要连接到源目标服务器可能会通过代理中转,TRACE方法就是用来确认连接过程中发生的一系列操作.
但是,TRACE方法本来就不怎么常用,再加上它容易引发XST(Cross-Site Tracing,跨站追踪)攻击,通常就更不会用到了.
使用TRACE方法的请求.响应的例子
请求  TRACE / HTTP/1.1
      Host:hackr.jp
      Mac-Forwards:2
响应  HTTP/1.1 200 OK
      Content-Type:message/http
      Content-Length:1024

      TRACE / HTTP/1.1
      Host:hackr.jp
      Max-Forwards:2(返回响应包含请求内容)
CONNECT:要求用隧道协议连接代理
CONNECT方法要求与在代理服务器通信时建立隧道,实现用隧道协议进行TCP通信.
主要使用SSL(Secure Sockets Layer,安全套接层)
和TLS(Transport Layer Security,传输层安全)协议把通信内容加密后经网络隧道传输.
CONNECT方法的格式如下所示.
CONNECT 代理服务器名:端口号 HTTP版本
使用CONNECT方法的请求.响应的例子
请求  CONNECT proxy.hackr.jp:8080 HTTP/1.1
      Host:proxy.hackr.jp
响应  HTTP/1.1 200 OK(之后进入网络隧道)
2.6 使用方法下达命令
向请求URI指定的资源发送请求报文时,采用称为方法的命令.
方法的作用在于,可以指定请求的资源按期望产生某种行为.方法中有GET,POST和HEAD等
2.7 持久连接节省通信量
HTTP协议的初始版本中,每进行一次HTTP通信就要断开一次TCP连接.
当使用浏览器浏览一个包含多张图片的HTML页面时,在发送请求访问HTML页面资源的同时,也会请求该HTML页面
包含的其他资源.因此,每次的请求都会造成无谓的TCP连接建立和断开,增加通信量的开销
2.7.1 持久连接
为了解决上述TCP连接的问题,HTTP/1.1和一部分的HTTP/1.0想出了
持久连接(HTTP Persistent Connections,也称为HTTP keep-alive或HTTP connection reuse)的方法.
持久连接的特点是,只要任意一端没有明确提出断开连接,则保持TCP连接状态
持久连接的好处在于减少了TCP连接的重复建立和断开所造成的的额外开销,减轻了服务器端的负载.
另外,减少开销的那部分时间,使HTTP请求和响应能够更早地结束,这样Web页面的显示速度也相应提高了.
在HTTP/1.1中,所有的连接默认都是持久连接,但在HTTP/1.0内并未标准化.虽然有一部分服务器通过非标准的手段实现了
持久连接,但服务器端不一定能够支持持久连接.毫无疑问,除了服务器端,客户端也需要支持持久连接
2.7.2 管线化
持久连接使得多数请求以管线化(pipelining)方式发送成为可能.
从前发送请求后需等待并收到响应,才能发送下一个请求.
管线化技术出现后,不用等待响应亦可直接发送下一个请求.
这样就能够做到同时并行发送多个请求,而不需要一个接一个地等待响应了.
2.8 使用Cookie的状态管理
保留无状态协议这个特征的同时又要解决类似的矛盾问题,于是引入了Cookie技术.
Cookie技术通过在请求和响应报文中写入Cookie信息来控制客户端的状态
Cookie会根据从服务器端发送的响应报文内的一个叫做Set-Cookie的首部字段信息,通知客户端保存Cookie.
当下次客户端再往该服务器发送请求时,客户端会自动在请求报文中加入Cookie值后发送出去.
服务器端发送客户端发送过来的Cookie后,会去检查究竟是从哪一个客户端发来的连接请求,然后对比服务器上的
记录,最后得到之前的状态信息
