第6章 HTTP首部
HTTP协议的请求和响应报文中必定包含HTTP首部,
HTTP首部的结构,以及首部中各字段的用法
6.1 HTTP报文首部
HTTP报文的结构
报文首部        在客户端和服务器处理时起至关重要作用的信息几乎都在这边
空行CR+LF
报文主体        所需要的用户和资源的信息都在这边
HTTP协议的请求和响应报文中必定包含HTTP首部.首部内容为客户端和服务器端分别处理请求和响应提供所需要的信息.
对于客户端用户来说,这些信息中的大部分内容都无需亲自查看

报文首部由几个字段构成
HTTP请求报文
在请求中,HTTP报文由方法,URI,HTTP版本,HTTP首部字段等部分构成
报文首部        请求行         方法,URI,HTTP版本
                请求首部字段\
                通用首部字段      HTTP首部字段
                实体首部字段/
                其他
空行 CR+LF
报文主体

HTTP响应报文
在响应中,HTTP报文由HTTP版本,状态码(数字和原因短语),HTTP首部字段3部分构成.
报文首部        状态行         HTTP版本,状态码
                响应首部字段\
                通用首部字段      HTTP首部字段
                实体首部字段/
                其他
空行CR+LF
报文主体

6.2 HTTP首部字段
6.2.1 HTTP首部字段传递重要信息
HTTP首部字段是构成HTTP报文的要素之一.在客户端与服务器之间以HTTP协议进行通信的过程中,无论是请求还是
响应都会使用首部字段,它能起到传递额外重要信息的作用.
使用首部字段是为了给浏览器和服务器提供报文主体大小,所使用的的语言,认证信息等内容.
6.2.2 HTTP首部字段结构
HTTP首部字段是由首部字段名和字段值构成的,中间用":"分隔
首部字段名: 字段值
例如,在HTTP首部中以Content-Type这个字段来表示报文主体的对象类型.
Content-Type: text/html
字段值对应单个HTTP首部字段可以有多个值
Keep-Alive: timeout=15, max=100
若HTTP首部字段重复了会如何?
当HTTP报文首部出现了两个或两个以上具有相同首部字段名时会怎样?
这种情况在规范内尚未明确,根据浏览器内部处理逻辑的不同,结果可能并不一致.
有些浏览器会优先处理第一次出现的首部字段,而有些则会优先处理最后出现的首部字段.
6.2.3 4种HTTP首部字段类型
HTTP首部字段根据实际用途被分为以下4种类型
通用首部字段(General Header Fields)
请求报文和响应报文都会使用的首部
请求首部字段(Request Header Fields)
从客户端向服务器端发送请求报文时使用的首部.补充了请求的附加内容,客户信息,响应内容相关优先级等信息
响应首部字段(Response Header Fields)
从服务器端向客户端返回响应报文时使用的首部.补充了响应的附加内容,也会要求客户端附加额外的内容信息
实体首部字段(Entity Header Fields)
针对请求报文和响应报文的实体部分使用的首部.补充了资源内容更新时间等与实体有关的信息.
6.2.4 HTTP/1.1首部字段一览
通用首部字段
首部字段名           说明
Cache-Control       控制缓存的行为
Connection          逐跳首部,连接的管理
Date                创建报文的日期时间
Pragma              报文指令
Trailer             报文末端的首部一览
Transfer-Encoding   指定报文主体的传输编码方式
Upgrade             升级为其他协议
Via                 代理服务器的相关信息
Warning             错误通知
请求首部字段
首部字段名           说明
Accept              用户代理可处理的媒体类型
Accept-Charset      优先的字符集
Accept-Encoding     优先的内容编码
Accept-Language     优先的语言(自然语言)
Authorization       Web认证信息
Expect              期待服务器的特定行为
From                用户的电子邮箱地址
Host                请求资源所在服务器
If-Match            比较实体标记(ETag)
If-Modified-Since   比较资源的更新时间
If-None-Match       比较实体标记(与If-Match相反)
If-Range            资源未更新时发送实体Byte的范围请求
If-Unmodified-Since 比较资源的更新时间(与If-Modified-Since相反)
Max-Forwards        最大传输逐跳数
Proxy-Authorization 代理服务器要求客户端的认证信息 authorization授权
Range               实体的字节范围请求
Referer             对请求中URI的原始获取方
TE                  传输编码的优先级
User-Agent          HTTP客户端程序的信息
响应首部字段
首部字段名           说明
Accept-Ranges       是否接受字节范围请求
Age                 推算资源创建经过时间
ETag                资源的匹配信息
Location            令客户端重定向至指定URI
Proxy-Authenticate  代理服务器对客户端的认证信息
Retry-After         对再次发起请求的时机要求
Server              HTTP服务器的安装信息
Vary                代理服务器缓存的管理信息
WWW-Authenticate    服务器对客户端的认证信息 authenticate鉴定
实体首部字段
首部字段名           说明
Allow               资源可支持的HTTP方法
Content-Encoding    实体主体适用的编码方式
Content-Language    实体主体的自然语言
Content-Length      实体主体的大小(单位:字节)
Content-Location    替代对应资源的URI
Content-MD5         实体主体的报文摘要
Content-Range       实体主体的位置范围
Content-Type        实体主体的媒体类型
Expires             实体主体过期的日期时间 expire期满
Last-Modified       资源的最后修改日期时间
6.2.5 非HTTP/1.1首部字段
在HTTP协议通信交互中使用到的首部字段,不限于RFC2616中定义的47种首部字段.
还有Cookie,Set-Cookie和Content-Disposition等在其他RFC中定义的首部字段,他们的使用频率也很高
这些非正式首部字段统一归纳在RFC4229 HTTP Header Field Registrations中
6.2.6 End-to-end首部和Hop-by-hop首部
HTTP首部字段将定义成缓存代理和非缓存代理的行为,分成两种类型.
端到端首部(End-to-end Header)
分在此类别中的首部会转发给请求/响应对应的最终接受目标,且必须保存在由缓存生成的响应中,另外规定它必须被转发.
逐跳首部(Hop-by-hop Header)
分在此类别中的首部只对单词转发有效,会因通过缓存或代理而不再转发.HTTP/1.1和之后版本中,如果要使用
hop-by-hop首部,需提供Connection首部字段.
下面列举了HTTP/1.1中逐跳首部字段.除这8个首部字段之外,其他所有字段都属于端到端首部
Connection
Keep-Alive
Proxy-Authenticate
Proxy-Authorization
Trailer
TE
Transfer-Encoding
Upgrade

6.3 HTTP/1.1 通用首部字段
通用首部字段是指,请求报文和响应报文双方都会使用的首部
6.3.1 Cache-Control
通过指定首部字段的Cache-Control的指令,就能操作缓存的工作机制.
指令的参数是可选的,多个指令之间通过","分隔.
首部字段Cache-Control的指令可用于请求及响应时.
Cache-Control: private, max-age=0, no-cache
Cache-Control指令一览
可用的指令按请求和响应分类如下所示
缓存请求指令
指令          参数      说明
no-cache      无       强制向源服务器再次验证
no-store      无       不缓存请求或响应的任何内容
max-age=[秒]  必需     响应的最大Age值
max-stale(=[秒])可省略  接收已过期的响应
min-fresh=[秒] 必需    期望在指定时间内的响应仍有效
no-transform    无       代理不可更改媒体类型
only-if-cached  无       从缓存获取资源
cache-extension -       新指令标记(token)
缓存响应指令
指令      参数          说明
public      无           可向任意方提供响应的缓存
private     可省略         仅向特定用户返回响应
no-cache    可省略         缓存前必需先确认其有效性
no-store    无               不缓存请求或响应的任何内容
no-transform    无       代理不可更改媒体类型.
must-revalidate 无       可缓存但必须再想源服务器进行确认
proxy-revalidate    无   要求中间缓存服务器对缓存的响应有效性再进行确认
max-age=[秒] 必需      响应的最大Age值
s-maxage=[秒]    必需  公共缓存服务器响应的最大Age值
cache-extension  -      新指令标记(token)

表示能否缓存的指令
public指令
Cache-Control: public
当指定使用public指令时,则明确表明其他用户也可利用缓存.
private指令
Cache-Control: private
当指定private指令后,响应只以特定的用户作为对象,这与public指令的行为相反.
缓存服务器会对该特定用户提供资源缓存的服务,对应其他用户发送过来的请求,代理服务器则不会返回返回缓存.
no-cache指令
Cache-Control: no-cache
使用no-cache指令的目的是为了防止从缓存中返回过期的资源.
客户端发送的请求中如果包含no-cache指令,则表示客户端将不会接收缓存过的响应.于是,
'中间'的缓存服务器必须把客户端请求转发给源服务器
如果服务器返回的响应中包含no-cache指令,那么缓存服务器不能对资源进行缓存.源服务器以后也将不再对缓存服务器
请求中提出的资源有效性进行确认,且禁止其对响应资源进行缓存操作
Cache-Control: no-cache=Location
由服务器返回的响应中,若报文首部字段Cache-Control中对no-cache字段名具体制定参数值,那么客户端在接收
到这个被指定参数值的首部字段对应的响应报文后,就不能使用缓存.换言之,无参数值的首部字段可以使用缓存.
只能在响应指令中指定该参数.
