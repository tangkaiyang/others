在HTTP协议中有可能存在信息窃听或身份伪装等安全问题.
使用HTTPS通信机制可以有效地防止这些问题
7.1 HTTP的缺点
通信使用明文(不加密),内容可能会被窃听
不验证通信方的身份,因此有可能遭遇伪装
无法证明报文的完整性,所以有可能已遭篡改
除此之外,HTTP还有很多缺点,而且
还有像特定的Web服务器和特定的Web浏览器在实际应用中存在的不足(脆弱性或安全漏洞)
Web应用也可能存在安全漏洞
7.1.1 通信使用明文可能被窃听
HTTP本身没有加密的功能,所以也无法做到对通信整体(使用HTTP协议通信的请求和响应的内容)进行加密.
即,HTTP报文使用明文(指未经过加密的报文)方式发送
TCP/IP是可能被窃听的网络
窃听相同段上的通信并非难事.只需要收集在互联网上流动的数据包(帧)就行了.
对应收集来的数据包的解析工作,可交给抓包(Packet Capture)或嗅探器(Sniffer)工具

加密处理防止被窃听
通信的加密
HTTP通过和SSL(Secure Socket Layer,安全套阶层)或TLS(Transport Layer Security,安全层传输协议)
的组合使用,加密HTTP的通信内容
用SSL建立安全通信线路之后,就可以在这条线路上进行HTTP通信了.
与SSL组合使用的HTTP被称为HTTPS(HTTP Secure,超文本传输安全协议)或HTTP over SSL
内容的加密
客户端需要对HTTP报文进行加密处理后再发送请求.
客户端和服务器同时具备加密和解密机制
7.1.2 不验证通信方的身份就可能遭遇伪装
任何人都可以发起请求
限于发送端的IP地址和端口号没有被Web服务器设定限制访问的前提下
无法确定请求发送至目标的Web服务器是否是按真实意图返回响应的那台服务器
无法确定响应返回到的客户端是否是按真实意图接受响应的那个客户端
无法确定正在通信的对方是否具备访问权限
无法判断请求来自何方,出自谁手
即使是无意义的请求也会照单全收.无法阻止海量请求下的DoS攻击(Denial of Service,拒绝服务攻击)


查明对手的证书
虽然使用HTTP协议无法确定通信方,但如果使用SSL则可以.
SSL不仅提供加密处理,而且还使用了一种被称为证书的手段,可用于确定方
证书由值的信任的第三方机构颁发,用以证明服务器和客户端是实际存在的.
另外,伪造证书从技术角度来说是异常困难的一件事.
所以只要能够确认通信方(服务器或客户端)持有的证书,即可判断通信方的真实意图.

7.1.3 无法证明报文完整性,可能已遭篡改
请求或响应在传输过程中,遭攻击者拦截并篡改内容的攻击称为中间人攻击(Man-in-the-Middle attack, MITM)
如何防止篡改:常用的是MD5和SHA-1等散列值校验的方法来确认报文完整性,以及用来确认文件的数字签名方法
提供文件下载服务的Web网站也会提供相应的以PGP(Pretty Good Privacy,完美隐私)
创建的数字签名及MD5算法生成的散列值.
PGP是用来证明创建文件的数字签名,
MD5是由单向函数生成的散列值.
需要操纵客户端的用户本人亲自检查验证下载的文件是否就是原来服务器上的文件.
浏览器无法自动帮用户检查
为了有效防止这些弊端,有必要使用HTTPS.
SSL提供认证和加密处理及摘要功能.仅靠HTTP确保完整性是非常困难的,因此
通过和其他协议组合使用来实现这个目标

7.2 HTTP+加密+认证+完整性保护=HTTPS
7.2.1 HTTP加上加密处理和认证以及完整性保护后即是HTTPS
7.2.2 HTTPS是身披SSL外壳的HTTP
HTTPS并非是应用层的一种新协议.
只是HTTP通信接口部分用SSL和TLS协议代替而已
通常,HTTP直接和TCP通信,当使用SSL时,则演变成先和SSL通信,再由SSL和TCP通信了.
SSL是独立于HTTP的协议,所以不光是HTTP协议,其他运行在应用层的SMTP和Telnet等协议均可配合SSL协议使用.
SSL是当今世界上应用最为广泛的网络安全技术
7.2.3 相互交换密钥的公开密钥加密技术
SSL采用一种叫做公开密钥加密(Public-key cryptography)的加密处理方式
共享密钥加密的困境
加密和解密同用一个密钥的方式成为
共享密钥加密(Common key crypto system),对称密钥加密
以共享密钥方式加密时必须将密钥也发给对方.通信被监听那么密钥就会泄露.
使用两把密钥的公开密钥加密
公开密钥加密使用一对非对称的密钥.
一把私有密钥(private key),另一把叫做公开密钥(public key).
顾名思义,私有密钥不能让其他任何人知道,而公开密钥则可以随意发布,任何人都可以获得.
使用公开密钥加密方式,发送密文的一方使用对方的公开密钥进行加密处理,
对方收到被加密的信息后,再使用自己的私有密钥进行解密.
利用这种方式,不需要发送用来解密的私有密钥,也不必担心密钥被攻击者窃听而被盗走.
另外,要想根据密文和公开密钥,恢复到信息原文是异常困难的,因为解密过程就是在
对离散对数进行求值.如果能对一个非常大的整数做到快速地因式分解,那么密码破解还是存在希望的.
HTTPS采用混合加密机制
在交换密钥环节使用公开密钥加密方式,之后的建立通信交换报文阶段则使用共享密钥加密方式

7.2.4 证明公开密钥正确性的证书
公开密钥加密方式还是存在一些问题的.
那就是无法证明公开密钥本身就是货真价实的公开密钥.
比如,正准备和某台服务器建立公开密钥加密方式下的通信时,如何证明收到的公开密钥就是原本预想的那台服务器
发行的公开密钥.或许在公开密钥传输途中,真正的公开密钥已被攻击者替换掉了.
为了解决上述问题,可以使用由数字证书认证机构(CA, Certificate Authority)和其相关机关颁布的公开密钥证书.
数字证书认证机构处于客户端与服务器双方都可信赖的第三方机构的立场上.
数字证书认证机构的业务流程.
首先,服务器的运营人员向数字证书认证机构提出公开密钥的申请.数字证书认证机构在判明提出申请者的身份之后,
会对已申请的公开密钥做数字签名,然后分配这个已签名的公开密钥,并将该公开密钥放入公钥证书后绑定在一起.
服务器会将由数字证书认证机构颁发的公钥证书发送给客户端,以进行公开密钥加密方式通信.
公钥证书也可以叫做数字证书或直接称为证书
接到证书的客户端可使用数字证书认证机构的公开密钥,对那张证书上的数字签名进行验证,
一旦验证通过,客户端便可明确两件事:
一.认证服务器的公开密钥的是真实有效的数字证书认证机构
二.服务器的公开密钥是值的信赖的.

