第5章 数据存储
TXT,JSON,CSV等
5.1 文件存储
5.1.1 TXT文本存储
3.打开方式
r只读,b二进制方式打开,r+读写,w,写(已存在,覆盖,不存在,新建),w+读写,a,追加(存在指针放在末尾,不存在,创建新文件)
a+,读写追加,
5.1.2 JSON文件存储
JSON,JavaScript Object Notation,JavaScript对象标记.
1.对象和数组
在JavaScript语言中,一切都是对象.因此,任何支持的类型都可以通过JSON来表示,
例如字符串,数字,对象,数组等,但是对象和数组是比较特殊且常用的两种类型
# 对象:它在JavaScript中是使用花括号{}包裹起来的内容,数据结构为{key1: value1, key2: value2, ...}的键值对结构.
在面向对象的语言中,key为对象的属性,value为对应的值.键名可以使用整数和字符串表示.值的类型可以是任意类型
# 数组:数组在JavaScript中是方括号[]包裹起来的内容,数据结构为["java", "javascript", "vb",...]的索引结构.
在js中,数组是一种比较特殊的数据类型,他也可以像对象那样使用键值对,但是还是索引用的多.同样,值的类型可以是任意类型
2.读取JSON
loads()方法将JSON文本字符串转换为JSON对象
通过dumps()方法将JSON对象转为文本字符串
值得注意的是JSON的数据需要用双引号来包围,不能使用单引号.
如果从JSON文本中读取内容,先将文本文件内容读出,然后再利用loads()方法转化
5.1.3 CSV文件存储
CSV,Comma-Separated Values,逗号分隔值或字符分隔值,其文件以纯文本形式存储表格数据.
该文件是一个字符序列,可以由任意数目的记录组成,记录间以某种换行符分隔.
每条记录由字段组成,字段间的分隔符是其他字符或字符串,最常见的是逗号或制表符.
不过所有记录都有完全相同的字段序列,相当于一个结构化表的纯文本形式.
它比Excel文件更加简洁,XLS文本是电子表格,它包含了文本,数值,公式和格式等内容,而
CSV中不包含这些内容,就是特定字符分隔的纯文本,结构简单清晰.所有,有时候用CSV来保存数据是比较方便的.
1.写入
2.读取
5.2 关系型数据库存储
关系型数据库是基于关系模型的数据库,而关系模型是通过二维表来保存的,所有它的存储方式就是行列组成的表,每一列是一个字段,
每一行是一条记录.表可以看作某个实体的集合,而实体之间存在练习,这就需要表与表之间的关联关系来体现,如主键外键的关联关系.
多个表组成一个数据库,也就是关系型数据库
关系型数据库由多种,SQLite,MySQL,Oracle,SQL Server,DB2等
# 事务.事务机制可以确保数据的一致性,也就是这件事要么发生,要么没发生.
比如插入一条数据,不会存在插入一半的情况,要么全部插入,要么不插入,这就是事务的原子性
事务还有三个属性---一致性,隔离性和持久性.
这4个属性通常称为ACID特性
属性                          解释
原子性(atomicity)          事务时不可分割的工作单位,事务中包括的诸操作要么都做,要么都不做
一致性(consistency)        事务必须使数据库从一个一致性状态变到另一个一致性状态.一致性与原子性密切相关
隔离性(isolation)          一个事务的执行不能被其他事务干扰,即一个事务内部的操作及使用的数据对并发的其他事务是隔离的,
                            并发执行的各个事务之间不能互相干扰
持久性(durability)         持久性也称永久性(permanence),指一个事务一旦提交,它对数据库中数据的改变就应该是永久性的.接下来
                            的其他操作或故障不应该对其由任何影响
插入,更新和删除操作都是对数据库进行更改的操作,而更改操作都必须是一个事务,
所以标准写法是:
try:
    cursor.execute(sql)
    db.commit()
except:
    db.rollback()
这样便可以保证数据的一致性.这里的commit()和rollback()方法就为事务的实现提供了支持
5.3 非关系型数据库存储
NoSQL,Not Only SQL,不仅仅是SQL,泛指非关系型数据库.
NoSQL是基于键值对的,而不需要经过SQL层的解析,数据之间没有耦合性,性能非常高
非关系型数据库:
# 键值存储数据库:Redis,Voldemort和Oracle BDB等
# 列存储数据库:Cassandra,HBase和Riak等
# 文档型数据库:CouchDB和MongoDB等
# 图形数据库:Neon4J,InfoGrid和Infinite Graph等
对于爬虫的数据存储来说,一条数据可能存在某些字段提取失败而确实的情况,而且数据可能随时调整.
另外,数据之间还存在嵌套关系.如果使用关系型数据库存储,一是需要提前建表,二是如果存在数据嵌套关系的话,
需要进行序列化操作才可以存储,非常不方便.
如果用了非关系型数据库,就可以避免一些麻烦,更简单高效
5.3.1 MongoDB存储
MongoDB是由C++语言编写的非关系型数据库,是一个基于分布式文件存储的开源数据库系统,其内容存储形式类似JSON对象,
它的字段值可以包含其他文档,数组及文档数组非常灵活,
新建bin目录同级目录data,data下新建db作为存储数据目录
mongod --dbpath "数据库路径"
设置mongodb为系统服务,进入bin目录下打开cmd命令:./mongod --bind_ip 0.0.0.0 --logpath "C:\Program Files\MongoDB\Server\4.0\log\mongodb.log" --logappend --dbpath "C:\Program Files\MongoDB\Server\4.0\data\db" --port 27017 --serviceName "MongoDB" --serviceDisplayName "MongoDB" --install
3.指定数据库
查询条件中的比较符号
符号                  含义                      示例
$lt             小于less than         {'age': {'$lt': 20}}
$gt             大于greater than      {'age': {'$gt': 20}}
$lte            小于等于less than and equal
$gte            大于等于greater than and equal
$ne             不等于not equal
$in             在范围内                {'age': {'$in': [20, 25]}}
$nin            不在范围内 not in        {'age': {'$nin': [20, 25]}}
功能符号
符号          含义                          示例                                  示例含义
$regex      匹配正则表达式        {'name': {'$regex': '^M.*'}                 name以M开头
$exists     属性是否存在          {'name': {'$exists': True}                  name属性存在
$type       类型判断                {'age': {'$type': 'int'}}                   age的类型为int
$mod        数字模操作           {'age': {'$mod': [5, 0]}                    年龄模5余0
$text       文本查询            {'$text': {'$search': 'Mike'}}              text类型的属性中包含Mike字符串
$where      高级条件查询      {'$where': 'obj.fans_count == obj.follows_count'}   自身粉丝数等于关注数
7.计数

5.3.2 Redis存储
Redis是一个基于内存的高效的键值型非关系型数据库,存取效率极高,而且支持多种存储数据结构,使用也非常简单
redis-py库的安装:pip install redis
2.redis-py库提供了两个类Redis和StrictRedis来实现Redis的命令操作.
4.键操作
键的一些判断和操作方法
方法              作用                  参数说明                示例                  示例说明                   示例结果
exists(name)    判断一个键是否存在   name:键名             redis.exists('name')    是否存在name这个键             True
delete(name)    删除一个键           name:键名             redis.delete('name')    删除name这个键                   1
type(name)      判断键类型           name:键名             redis.type('name')      判断name这个键类型             b'string'
keys(pattern)   获取所有符合规则的键  pattern:匹配规则        redis.keys('n*')        获取所有以n开头的键          [b'name']
randomkey()     获取随机的一个键                            randomkey()             获取随机的一个键                b'name'
rename(src, dst)重命名键            src:原键名,dst:新键名 redis.rename('name','nickname') 将name重命名为nickname   True
dbsize()        获取当前数据库中的键的数目                   dbsize()                获取当前数据库中的键的数目       100
expire(name, time)设定键的过期时间,单位为秒;name:键名/time:秒数;redis.expire('name', 2);将name键过期时间设置为2秒;True
ttl(name);获取键的过期时间,单位为秒,-1表示永久不过期;name:键名;redis.ttl('name');获取name这个键的过期时间;-1
move(name, db);将键移动到其他数据库;name:键名/db:数据库代号;move('name', 2);将name移动到2号数据库;True
flushdb();删除当前选择数据库中的所有键;   ;flushdb();删除当前选择数据库中的所有键;True
flushall();删除所有数据库中的所有键;    ;flushall();删除所有数据库中的所有键;True
5.字符串操作
Redis支持最基本的键值对形式存储
键值对形式存储
方法;作用;参数说明;示例;示例说明;示例结果
set(name, value);给数据库中键为name的string赋予属性value;name:键名/value:值;redis.set('name', 'Bob');给name这个键的value赋值为Bob;True
get(name);返回数据库中键为name的string的value;name:键名;redis.get('name');返回name这个键的value;b'Bob'
getset(name, value);给数据库中键为name的string赋予值value并返回上次的value;name:键名/value:新值;redis.getset('name', 'Mike');赋值name为Mike并得到上次的value;b'Bob'
mget(keys, *args);返回多个键对应的value;keys:键的列表;redis.mget(['name', 'nickname']);返回name和nickname的value;[b'Mike', b'Miker']
setnx(name, value);如果不存在这个键值对,则更新value,否则不变;name:键名;redis.setnx('newname', 'James');如果newname这个键不存在,则设置值为James;这一次运行的结果是True,第二次运行的结果是False
setex(name, time, value);设置可以对应的值为string类型的value,并制定此键值对应的有效期;name:键名/time:有效期/value:值;redis.setex('name', 1, 'James');将name这个键的值设为James,有效期为1秒;True
setrange(name, offset, value);设置指定键的value值的子字符串;name:键名/offset:偏移量/value:值;redis.set('name', 'Hello') redis.setrange('name', 6, 'World');设置name为Hello字符串,并在index为6的位置补World;11,修改后的字符串长度
mset(mapping);批量赋值;mapping:字典;redis.mset({'name1': 'Durant', 'name2': 'James'});将name1设为Durant,name2设为James;True
msetnx(mapping);键均不存在时才批量赋值;mapping:字典;redis.msetnx({'name3': 'Smith', 'name4': 'Curry'});在name3和name4均不能存在的情况下才设置二者值;True
incr(name, amount=1);键为name的value增量操作,默认为1,键不存在则被创建并设为amount;name:键名/amount:增长的值;redis.incr('age', 1);age对应的值增1,若不存在,则会创建并设置为1;1,及修改后的值
decr(name, amount=1);键为name的vlaue减值操作,默认为1,键不存在则被创建并将value设置为-amount;name:键名/amount:减少的值;redis.decr('age', 1);age对应的值减1,若不存在,则会创建并设置为-1;-1,即修改后的值
append(key, value);键为name的string的值附加vlaue;key:键名;redis.append('nickname', 'OK');向键为nickname的值后追加OK;13,即修改后的字符串长度
substr(name, start, end=-1);返回键为name的string的字串;name:键名/start:起始索引/end:终止索引,默认为-1,表示截取到末尾;redis.substr('name', 1, 4);返回键为name的值的字符串,截取索引为1~4的字符;b'ello'
getrange(key, start, end);获取键的value值从start到end的子字符串;key:键名/start:起始索引/end:终止索引;redis.getrange('name', 1, 4);返回键为name的值的字符串,截取索引为1~4的字符;b'ello'
